class Solution {
   
    //Time Complexity  - O(n)
    //Space Complexity - O(h) the stack space would be max height 
    // didn't face any challenges while traversal 
    /* Approach - while recursively traversing tree in Root-Right-Left 
                    >> checking if the current node is first of its depth add to output
                        else continue  */
        
    
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> rightView = new ArrayList<>();
        dfs(root, rightView ,0);
        return rightView;
    }

    private void dfs(TreeNode root, List<Integer> rightView, int depth){//2,[1,3,4],1
        // base 
        if(root == null) return ;
        // logic 
        if(depth == rightView.size()) rightView.add(root.val);

        if(root.right != null) dfs(root.right, rightView, depth+1); 
        if(root.left != null) dfs(root.left, rightView, depth+1);

    }
}